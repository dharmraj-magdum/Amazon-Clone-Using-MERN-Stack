const asyncHandler = require("express-async-handler");
// const mongoose = require("mongoose");

const ProductModel = require("../models/ProductModel");
// const UserModel = require("../models/UserModel");

// @desc    Get all Product for seeing to anyone
// @route   GET /api/Products/all/
// @access  Public
const getAllProducts = asyncHandler(async (req, res) => {
	const products = await ProductModel.find();
	// console.log(products);
	res.status(200).json(products);
});

// @desc    Get all Product for seeing to anyone
// @route   GET /api/Products/all/
// @access  Public
const getOneProduct = asyncHandler(async (req, res) => {
	// const { name, email } = req.user;
	// console.log("name-", name, email);
	const productId = req.params.productId;
	const Product = await ProductModel.findById(productId);

	if (!Product) {
		res.status(400);
		throw new Error("Product not found");
	}
	res.status(200).json(Product);
});

// populate products in cart
const cartItems = asyncHandler(async (req, res) => {
	// console.log("getting cart items");
	if (!req.user) {
		console.log("user not fount to see cart");
		throw new Error("cannot see cart as user not found");
	}
	let products = [];
	// console.log(req.user.cart.length);
	for (let index = 0; index < req.user.cart.length; index++) {
		const id = req.user.cart[index];
		// console.log(id);
		let product = await ProductModel.findById(id);
		// console.log(product);
		products.push(product);
	}
	// console.log(products);
	res.status(200).json(products);
	// console.log("cart iteams fetched");
});

///other operations on product are out of syllabus now
//---------------------------------------------------------------------------
// // @desc    Set Product
// // @route   POST /api/Products
// // @access  Private
// const addProduct = asyncHandler(async (req, res) => {
// 	// console.log("image in controller--", req.body.image);
// 	const { title, description, image } = req.body;
// 	const userId = req.userId;
// 	if (!title || !description || !image) {
// 		res.status(400);
// 		throw new Error("Please fill all field of Product");
// 	}
// 	let existingUser = await UserModel.findById(userId);
// 	const Product = new ProductModel({
// 		title,
// 		description,
// 		image,
// 		userId,
// 		creator: existingUser.name,
// 	});
// 	try {
// 		//create sessoin with db
// 		const session = await mongoose.startSession();
// 		//start trasanction
// 		session.startTransaction();
// 		//save Product to Product collection
// 		await Product.save({ session });
// 		//push Product to user's Products array
// 		existingUser.Products.push(Product);
// 		//save user to user collection
// 		await existingUser.save({ session });
// 		//commit all transaction in this session to db
// 		await session.commitTransaction();
// 	} catch (err) {
// 		console.log(err);
// 		throw new Error(err);
// 	}
// 	return res.status(200).json(Product);
// });

// // @desc    Update Product
// // @route   PUT /api/Products/:id
// // @access  Private
// const updateProduct = asyncHandler(async (req, res) => {
// 	const { title, description, image } = req.body;
// 	if (!title || !description || !image) {
// 		res.status(400);
// 		throw new Error("Please fill all field to update Product");
// 	}
// 	const ProductId = req.params.id;
// 	const Product = await productModel.findById(ProductId);

// 	if (!Product) {
// 		res.status(400);
// 		throw new Error("Product not found");
// 	}

// 	// Make sure the logged in user matches the Product user
// 	if (Product.userId.toString() !== req.userId) {
// 		res.status(401);
// 		throw new Error("User not authorized to do update Product");
// 	}

// 	const updatedProduct = await ProductModel.findByIdAndUpdate(
// 		ProductId,
// 		{
// 			title,
// 			description,
// 			image,
// 		},
// 		{
// 			new: true,
// 		}
// 	);

// 	res.status(200).json(updatedProduct);
// });

// // @desc    Delete Product
// // @route   DELETE /api/Products/:id
// // @access  Private
// const deleteProduct = asyncHandler(async (req, res) => {
// 	const ProductId = req.params.id;

// 	let Product;
// 	Product = await productModel
// 		.findByIdAndRemove(ProductId)
// 		.populate("userId");
// 	if (!Product) {
// 		res.status(400);
// 		throw new Error("Product not found to delete it");
// 	}
// 	try {
// 		//popute wil generate refernced model in current doc
// 		//meanin now Product conatin its user in it
// 		const { userId } = Product;
// 		//in this case userId is whole user generated by populate
// 		// Make sure the logged in user matches the Product user
// 		if (userId._id.toString() !== req.userId) {
// 			res.status(401);
// 			throw new Error("User not authorized to delelte");
// 		}
// 		//we can remove this Product from its array
// 		await userId.Products.pull(Product);
// 		//save the owner of this Product after removing Product
// 		await userId.save();
// 	} catch (err) {
// 		console.log(err);
// 		res.status(400);
// 		throw new Error(err);
// 	}
// 	res.status(200).json({ ProductId });
// });

module.exports = {
	getAllProducts,
	getOneProduct,
	cartItems,
	// addProduct,
	// updateProduct,
	// deleteProduct,
};
